(()=>{"use strict";var e={d:(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{AddCommand:()=>n,CalculateCommand:()=>v,CbrtCommand:()=>O,ClearCommand:()=>w,CubeCommand:()=>l,DivideCommand:()=>s,FactorialCommand:()=>b,InverseCommand:()=>f,MemoryAddCommand:()=>h,MemoryClearCommand:()=>x,MemoryRecallCommand:()=>I,MemorySubtractCommand:()=>g,MultiplyCommand:()=>o,NegateCommand:()=>m,PercentCommand:()=>i,Power10Command:()=>d,PowerCommand:()=>p,RootCommand:()=>C,SqrtCommand:()=>y,SquareCommand:()=>c,SubtractCommand:()=>a});class r{static name="";execute(e){null!==e.leftOperand&&e.operator&&e.invoker.executeCommand("calculate",e),e.leftOperand=parseFloat(e.currentInput),e.currentInput="",e.operator=this.constructor.operator||this.constructor.name.toLowerCase(),e.pendingFunction="",e.updateDisplay()}performOperation(e,t){throw new Error("performOperation must be implemented by subclass")}}class n extends r{static name="add";performOperation(e,t){return e+t}}class a extends r{static name="subtract";performOperation(e,t){return e-t}}class o extends r{static name="multiply";performOperation(e,t){return e*t}}class s extends r{static name="divide";performOperation(e,t){return 0===t?"Ошибка":e/t}}class i{static name="percent";execute(e){if(null!==e.leftOperand&&e.operator){const t=parseFloat(e.currentInput),r=e.leftOperand*(t/100);e.currentInput=r.toString(),e.updateDisplay()}}}class u{static name="";execute(e){const t=parseFloat(e.currentInput),r=this.performOperation(t);e.currentInput=r.toString(),e.updateDisplay()}performOperation(e){throw new Error("performOperation must be implemented by subclass")}}class m extends u{static name="negate";performOperation(e){return 0===e?0:-e}}class c extends u{static name="square";performOperation(e){return e**2}}class l extends u{static name="cube";performOperation(e){return e**3}}class p extends r{static name="power";performOperation(e,t){return e**t}}class d extends u{static name="power10";performOperation(e){return 10**e}}class f extends u{static name="inverse";performOperation(e){return 1/e}}class y extends u{static name="sqrt";performOperation(e){if(e<0)return"Ошибка";if(0===e)return 0;let t=e/2;for(let r=0;r<10;r++)t=(t+e/t)/2;return t}}class O extends u{static name="cbrt";performOperation(e){if(0===e)return 0;let t=e/3;for(let r=0;r<10;r++)t=(2*t+e/(t*t))/3;return t}}class C extends r{static name="root";static operator="root";performOperation(e,t){if(0===t)return"Ошибка";if(e<0&&t%2==0)return"Ошибка";if(0===e)return 0;if(1===t)return e;const r=e<0,n=r?-e:e;let a=n>1?n/t:1;for(let e=0;e<100;e++){let e=1;for(let r=0;r<t-1;r++)e*=a;const o=t*e;if(0===o)return"Ошибка";const s=a-(a*e-n)/o;if(this.absoluteValue(s-a)<1e-12)return r?-s:s;if(a=s,!this.isFinite(a)||this.isNaN(a))return"Ошибка"}return r?-a:a}absoluteValue(e){return e<0?-e:e}isFinite(e){return"number"==typeof e&&e!==1/0&&e!==-1/0}isNaN(e){return e!=e}}class b extends u{static name="factorial";performOperation(e){if(e<0||!Number.isInteger(e))return"Error";let t=1;for(let r=2;r<=e;r++)t*=r;return t}}class x{static name="memoryClear";execute(e){e.memory=0,e.updateDisplay()}}class h{static name="memoryAdd";execute(e){e.memory+=parseFloat(e.currentInput),e.currentInput="",e.updateDisplay()}}class g{static name="memorySubtract";execute(e){e.memory-=parseFloat(e.currentInput),e.currentInput="",e.updateDisplay()}}class I{static name="memoryRecall";execute(e){e.currentInput=e.memory.toString(),e.updateDisplay()}}class v{static name="calculate";execute(e){if(null===e.leftOperand||!e.operator)return;const t=parseFloat(e.currentInput),r=e.invoker.commands[e.operator];if(!r||"function"!=typeof r.performOperation)return e.currentInput="Error",void e.updateDisplay();const n=r.performOperation(e.leftOperand,t);e.currentInput=n.toString(),e.leftOperand=null,e.operator=null,e.updateDisplay()}}class w{static name="clear";execute(e){e.currentInput="",e.leftOperand=null,e.operator=null,e.updateDisplay()}}class F{constructor(){this.commands={}}registerCommand(e,t){this.commands[e]=t}executeCommand(e,t,...r){this.commands[e]?this.commands[e].execute(t,...r):console.warn(`Command ${e} not found`)}}const S=new class{constructor(){this.display=document.getElementById("display"),this.memory=0,this.currentInput="",this.leftOperand=null,this.operator=null,this.pendingFunction="",this.invoker=new F,Object.entries(t).forEach((([e,t])=>{this.invoker.registerCommand(t.name||e,new t)}))}executeCommand(e){this.invoker.commands[e]&&this.invoker.executeCommand(e,this)}updateDisplay(){this.display.value=this.currentInput||"0"}};document.getElementById("buttons").addEventListener("click",(e=>{const t=e.target;if("BUTTON"!==t.tagName)return;const r=t.getAttribute("data-command"),n=t.getAttribute("data-value");if("digit"===r)S.currentInput=(a=S.currentInput,"."===(o=n)&&a.includes(".")||"0"===o&&"0"===a?a:"0"===a&&/[1-9]/.test(o)?o:a+o),S.updateDisplay();else{if(["add","subtract","multiply","divide","percent","negate","square","cube","power","power10","inverse","sqrt","cbrt","root","factorial","memoryAdd","memorySubtract","calculate"].includes(r)&&!function(e){return""!==e&&!isNaN(parseFloat(e))&&isFinite(parseFloat(e))}(S.currentInput))return S.display.value="Ошибка",S.currentInput="",S.leftOperand=null,S.operator=null,void(S.pendingFunction="");S.executeCommand(r)}var a,o})),S.updateDisplay()})();